[tool.poetry]
name = "snowflake-mcp-lambda"
version = "0.1.0"
description = "A remote Model Context Protocol Server for Snowflake deployed as AWS Lambda"
authors = ["Samar Don <samar@example.com>"]
readme = "README.md"
packages = [{include = "app", from = "backend"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
pydantic = {extras = ["email"], version = "^2.7.0"}
pydantic-settings = "^2.3.0"
sqlalchemy = "^2.0.30"
alembic = "^1.13.0"
asyncpg = "^0.29.0"
redis = "^5.0.0"
snowflake-connector-python = "^3.11.0"
google-auth = "^2.29.0"
google-auth-oauthlib = "^1.2.0"
pyjwt = {extras = ["crypto"], version = "^2.8.0"}
google-generativeai = "^0.6.0"
structlog = "^24.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^5.0.0"
black = "^24.4.0"
ruff = "^0.4.0"
isort = "^5.13.0"
mypy = "^1.10.0"
pre-commit = "^3.7.0"
httpx = "^0.27.0"
types-redis = "^4.6.0"
types-requests = "^2.31.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["backend/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=backend/app",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "S",  # flake8-bandit
    "T20", # flake8-print
    "PL", # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "S101",  # use of assert detected
    "PLR0913", # too many arguments to function call
    "I001",  # import sorting - handled by isort separately
]

[tool.ruff.lint.per-file-ignores]
"backend/tests/*" = ["S101", "S105", "S106", "S603", "PLR2004"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["backend"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
exclude = ["backend/tests/"]

[[tool.mypy.overrides]]
module = "snowflake.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.generativeai.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["backend/app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
