# ABOUTME: Docker Compose configuration for monitoring stack (Prometheus, Grafana, exporters)
# ABOUTME: Extends production deployment with comprehensive monitoring and alerting

version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: snowflake-mcp-prometheus
    restart: unless-stopped

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus

    ports:
      - "9090:9090"

    networks:
      - monitoring-network
      - backend-network

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:10.0.0
    container_name: snowflake-mcp-grafana
    restart: unless-stopped

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false

    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro

    ports:
      - "3000:3000"

    networks:
      - monitoring-network

    depends_on:
      - prometheus

    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: snowflake-mcp-cadvisor
    restart: unless-stopped

    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg

    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

    ports:
      - "8080:8080"

    networks:
      - monitoring-network

    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: snowflake-mcp-node-exporter
    restart: unless-stopped

    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

    ports:
      - "9100:9100"

    networks:
      - monitoring-network

    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: snowflake-mcp-postgres-exporter
    restart: unless-stopped

    environment:
      - DATA_SOURCE_NAME=postgresql://readonly_user:readonly_password_change_me@postgres:5432/snowflake_mcp?sslmode=disable

    ports:
      - "9187:9187"

    networks:
      - monitoring-network
      - database-network

    depends_on:
      - postgres

    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

  redis-exporter:
    image: oliver006/redis_exporter:v1.51.0
    container_name: snowflake-mcp-redis-exporter
    restart: unless-stopped

    environment:
      - REDIS_ADDR=redis://redis:6379

    ports:
      - "9121:9121"

    networks:
      - monitoring-network
      - database-network

    depends_on:
      - redis

    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: snowflake-mcp-nginx-exporter
    restart: unless-stopped

    command:
      - -nginx.scrape-uri=http://nginx:80/nginx_status

    ports:
      - "9113:9113"

    networks:
      - monitoring-network
      - backend-network

    depends_on:
      - nginx

    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: snowflake-mcp-alertmanager
    restart: unless-stopped

    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager

    ports:
      - "9093:9093"

    networks:
      - monitoring-network

    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

networks:
  monitoring-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: snowflake-monitoring

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
