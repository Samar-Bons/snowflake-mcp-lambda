"""Create query history model

Revision ID: 002_create_query_history_model
Revises: 001_create_user_model
Create Date: 2024-12-28 14:31:00.000001

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "002_create_query_history_model"
down_revision = "001_create_user_model"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Create query_history table with all required fields and relationships."""
    op.create_table(
        "query_history",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("natural_language_input", sa.Text(), nullable=False),
        sa.Column("generated_sql", sa.Text(), nullable=False),
        sa.Column("execution_status", sa.String(length=50), nullable=False),
        sa.Column("execution_time_ms", sa.Integer(), nullable=True),
        sa.Column("row_count", sa.Integer(), nullable=True),
        sa.Column("query_results", sa.JSON(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("is_favorite", sa.Boolean(), nullable=False),
        sa.Column("custom_name", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="fk_query_history_user_id",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # Create indexes for performance
    op.create_index(op.f("ix_query_history_user_id"), "query_history", ["user_id"])
    op.create_index(
        op.f("ix_query_history_execution_status"),
        "query_history",
        ["execution_status"],
    )
    op.create_index(
        op.f("ix_query_history_is_favorite"), "query_history", ["is_favorite"]
    )
    op.create_index(
        op.f("ix_query_history_created_at"), "query_history", ["created_at"]
    )

    # Add table comment
    op.execute(
        "COMMENT ON TABLE query_history IS 'User query history with execution results and metadata'"
    )

    # Add column comments
    op.execute(
        "COMMENT ON COLUMN query_history.id IS 'Unique query history identifier'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.user_id IS 'User who executed the query'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.natural_language_input IS 'Original natural language query from user'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.generated_sql IS 'SQL query generated by LLM'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.execution_status IS 'Query execution status: pending, success, failed, cancelled'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.execution_time_ms IS 'Query execution time in milliseconds'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.row_count IS 'Number of rows returned by query'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.query_results IS 'Query results in JSON format (limited for storage)'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.error_message IS 'Error message if query failed'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.is_favorite IS 'Whether user marked query as favorite'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.custom_name IS 'Custom name given by user for the query'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.created_at IS 'Query execution timestamp'"
    )
    op.execute(
        "COMMENT ON COLUMN query_history.updated_at IS 'Record last update timestamp'"
    )

    # Set default values after table creation
    op.execute(
        "ALTER TABLE query_history ALTER COLUMN execution_status SET DEFAULT 'pending'"
    )
    op.execute("ALTER TABLE query_history ALTER COLUMN is_favorite SET DEFAULT false")


def downgrade() -> None:
    """Drop query_history table and all related objects."""
    op.drop_index(op.f("ix_query_history_created_at"), table_name="query_history")
    op.drop_index(op.f("ix_query_history_is_favorite"), table_name="query_history")
    op.drop_index(op.f("ix_query_history_execution_status"), table_name="query_history")
    op.drop_index(op.f("ix_query_history_user_id"), table_name="query_history")
    op.drop_table("query_history")
