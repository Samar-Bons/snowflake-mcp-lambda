[tool.poetry]
name = "snowflake-mcp-lambda"
version = "0.1.0"
description = "A remote Model Context Protocol Server for Snowflake deployed as AWS Lambda"
authors = ["Samar Don <samar@example.com>"]
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
pydantic = {extras = ["email"], version = "^2.7.0"}
pydantic-settings = "^2.3.0"
sqlalchemy = "^2.0.30"
alembic = "^1.13.0"
asyncpg = "^0.29.0"
redis = "^5.0.0"
snowflake-connector-python = "^3.11.0"
google-auth = "^2.29.0"
google-auth-oauthlib = "^1.2.0"
pyjwt = {extras = ["crypto"], version = "^2.8.0"}
google-generativeai = "^0.6.0"
structlog = "^24.2.0"
psycopg2-binary = "^2.9.10"
cryptography = "^45.0.5"
pandas = "^2.1.0"
chardet = "^5.2.0"
python-multipart = "^0.0.9"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^5.0.0"
ruff = "^0.4.0"
mypy = "^1.10.0"
pre-commit = "^3.7.0"
httpx = "^0.27.0"
types-redis = "^4.6.0"
types-requests = "^2.31.0"
pandas-stubs = "^2.1.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]


[tool.ruff]
target-version = "py310"
line-length = 88
src = ["."]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "S",    # flake8-bandit
    "T20",  # flake8-print
    "PL",   # pylint
    "RUF",  # ruff-specific rules
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
]
ignore = [
    "E501",    # line too long, handled by formatter
    "PLR0913", # too many arguments to function call
    "COM812",  # trailing comma (conflicts with formatter)
    "ISC001",  # implicit string concat (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # assert use (required for pytest)
    "S105",    # hardcoded password (test fixtures)
    "S106",    # hardcoded password in argument (test fixtures)
    "S603",    # subprocess call (integration tests)
    "PLR2004", # magic values (common in tests)
    "SLF001",  # private member access (testing internals)
]
# Complex data structures with acceptable type issues
"app/data/sqlite_adapter.py" = [
    "TCH003",  # pathlib needed at runtime for file operations
]
"app/services/*" = [
    "C901",    # complexity acceptable for file processing
    "PLR0911", # multiple returns acceptable for validation functions
    "PLR0912", # many branches acceptable for cleanup functions
    "PLW2901", # variable reassignment is intentional
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"


[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
show_error_codes = true
exclude = ["migrations/"]

# More permissive settings for tests while still type-checking them
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_return_any = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "snowflake.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.generativeai.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
