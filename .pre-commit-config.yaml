repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements

  # Additional quality checks (infrastructure)
  - repo: local
    hooks:
      # Basic shell script validation
      - id: shell-syntax-check
        name: shell syntax check
        entry: bash -n
        language: system
        files: \.sh$
        pass_filenames: true

      # Basic markdown validation
      - id: markdown-check
        name: markdown basic check
        entry: bash -c
        args: ['for file in "$@"; do echo "Checking markdown: $file"; done']
        language: system
        files: \.(md|markdown)$
        pass_filenames: true

      # Docker file basic validation
      - id: dockerfile-check
        name: dockerfile basic check
        entry: bash -c
        args: ['for file in "$@"; do echo "Checking dockerfile: $file"; done']
        language: system
        files: ^.*Dockerfile.*$
        pass_filenames: true

  # Backend hooks (Python) - Use local hooks to ensure exact CI parity
  - repo: local
    hooks:
      # Ruff - linting and formatting for backend (exact CI parity)
      - id: ruff-check-backend
        name: ruff check (backend)
        entry: ./scripts/poetry-wrapper.sh run ruff check --output-format=github .
        language: system
        files: ^backend/.*\.py$
        require_serial: true
        pass_filenames: false

      - id: ruff-format-backend
        name: ruff format (backend)
        entry: ./scripts/poetry-wrapper.sh run ruff format --check .
        language: system
        files: ^backend/.*\.py$
        require_serial: true
        pass_filenames: false

      # MyPy - type checking for backend (exact CI parity)
      - id: mypy-backend
        name: mypy (backend)
        entry: ./scripts/poetry-wrapper.sh run mypy .
        language: system
        files: ^backend/.*\.py$
        require_serial: true
        pass_filenames: false

      # Pytest - full test suite with coverage (exactly as CI runs it)
      # NOTE: Disabled for initial commits, enable after poetry install
      # - id: pytest
      #   name: pytest with coverage
      #   entry: ./scripts/poetry-wrapper.sh run pytest
      #   language: system
      #   pass_filenames: false
      #   always_run: true
      #   args: [--cov=app, --cov-report=term-missing, --cov-fail-under=85]
      #   stages: [commit]

      # Poetry check - ensure lock file is up to date
      - id: poetry-check
        name: poetry check
        entry: ./scripts/poetry-wrapper.sh check
        language: system
        pass_filenames: false
        files: backend/pyproject.toml

      # Security check with bandit (via ruff S rules) for backend
      - id: security-check-backend
        name: security check (backend)
        entry: ./scripts/poetry-wrapper.sh run ruff check --select=S app/ tests/
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

      # SQL migration validation
      - id: sql-check
        name: SQL syntax check
        entry: bash -c 'for file in "$@"; do echo "Checking $file"; done'
        language: system
        files: \.(sql)$
        pass_filenames: true

  # Frontend hooks (TypeScript/React)
  - repo: local
    hooks:
      # ESLint for frontend
      - id: eslint-frontend
        name: ESLint (frontend)
        entry: bash -c 'cd frontend && npm run lint'
        language: system
        files: ^frontend/.*\.(ts|tsx|js|jsx)$
        pass_filenames: false
        require_serial: true

      # TypeScript check for frontend (via build)
      - id: tsc-frontend
        name: TypeScript check (frontend)
        entry: bash -c 'cd frontend && npx tsc --noEmit'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        pass_filenames: false
        require_serial: true

# Configuration to run all hooks
default_stages: [commit]
fail_fast: false  # Run all checks even if one fails
